import os
import re

from telegram.ext import CommandHandler, MessageHandler, Filters, CallbackQueryHandler
from telegram import ForceReply, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

from settings import WELCOME_MESSAGE, TELEGRAM_SUPPORT_CHAT_ID, TELEGRAM_SUPERCHAT_ID
from db import *

user_questions = dict()
main_channel = int(-1001525702468)
main_chat = int(-1001610448157)

curators = {
    -1001764887260: -1001530512275,
    -1001178196959: -1001526061429,
    -1001198171192: -1001198171192,
}

curators_queue = list(curators.keys())
def __init__(self):
    global main_channel
    global main_chat
    global user_questions
    global curators
    global curators_queue
    user_questions[0] = 1


def start(update, context):
    #     update.message.reply_text(WELCOME_MESSAGE, reply_markup=ForceReply(force_reply=True, input_field_placeholder = "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å"))
    print('/start')
    custom_keyboard = [['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=False, resize_keyboard=True)

    user_telegram_id = update.message.from_user.id
    if not check_by_telegram_id(user_telegram_id):
        custom_keyboard = []
        reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
        update.message.reply_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—è–¥—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ê–∫–∞–¥–µ–º–∏–∏ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏üíö\n\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ-–∫—É—Ä–∞—Ç–æ—Ä–∞, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Ä–∞—á–µ–π –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã.\n‚†Ä\n‚ÅâÔ∏è–ó–∞–ø—É—Å—Ç–∏–≤ –≤ –±–æ—Ç, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞–º–∏:‚ÅâÔ∏è\n‚†Ä\nüìç—Å—Ç–∞—Ä–∞—Ç—å—Å—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–±—É—á–∞—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è, –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è –∏ —Ç.–¥.\n‚†Ä\nüìç–∑–∞–ø—Ä–µ—â–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∞ –∫—É—Ä—Å–µ, —Ç–∞–∫ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–∞—á–µ–±–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n‚†Ä\nüìç–∑–∞–ø—Ä–µ—â–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º –∏ –ë–ê–î–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∞ –∫—É—Ä—Å–µ, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞—É—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
            reply_markup=reply_markup)
        update.message.reply_text(
            '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–∞–¥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ',
            reply_markup=reply_markup)
        return

    update.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—è–¥—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ê–∫–∞–¥–µ–º–∏–∏ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏üíö\n\n–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–æ—Ç–µ-–∫—É—Ä–∞—Ç–æ—Ä–∞, –≥–¥–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç –≤—Ä–∞—á–µ–π –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã.\n‚†Ä\n‚ÅâÔ∏è–ó–∞–ø—É—Å—Ç–∏–≤ –≤ –±–æ—Ç, —Ç—ã —Å–æ–≥–ª–∞—à–∞–µ—à—å—Å—è —Å –µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞–º–∏:‚ÅâÔ∏è\n‚†Ä\nüìç—Å—Ç–∞—Ä–∞—Ç—å—Å—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–±—É—á–∞—é—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã: –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—è, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è, –¥–∏–µ—Ç–æ–ª–æ–≥–∏—è –∏ —Ç.–¥.\n‚†Ä\nüìç–∑–∞–ø—Ä–µ—â–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∞ –∫—É—Ä—Å–µ, —Ç–∞–∫ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–∞—á–µ–±–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n‚†Ä\nüìç–∑–∞–ø—Ä–µ—â–µ–Ω—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º –∏ –ë–ê–î–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –Ω–∞ –∫—É—Ä—Å–µ, –Ω–æ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–ª—è –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞—É—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" –∏ –ø–æ–ª—É—á–∏ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç)',
        reply_markup=reply_markup)


def setup_dispatcher(dp):
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(MessageHandler(Filters.regex('^–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å$'), new_question))
    dp.add_handler(MessageHandler(Filters.regex('^–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω$'), close_problem))

    dp.add_handler(MessageHandler(Filters.chat_type.private, handle_user_message))

    dp.add_handler(MessageHandler(Filters.chat(main_chat) & Filters.reply, handle_curator_message))

    dp.add_handler(
        MessageHandler(Filters.chat(main_chat) & Filters.forwarded_from(chat_id=main_channel),
                       update_pinned))

    for curator_channel, curator_chat in curators.items():
        dp.add_handler(MessageHandler(Filters.chat(curator_chat) & Filters.reply, handle_curator_message))
        dp.add_handler(
            MessageHandler(Filters.chat(int(curator_chat)) & Filters.forwarded_from(chat_id=int(curator_channel)),
                           update_pinned))

    dp.add_handler(MessageHandler(Filters.all, handle_message))
    dp.add_handler(CallbackQueryHandler(first_submenu,
                                        pattern='^.*es.*$'))
    return dp


def new_question(update, context):
    user_telegram_id = update.message.from_user.id

    if not check_by_telegram_id(user_telegram_id):
        update.message.reply_text(
            '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã')
        return

    custom_keyboard = [['–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω']]
    user_chat_id = update.message.chat.id

    if not user_chat_id in user_questions:
        reply_markup = ReplyKeyboardMarkup(keyboard=custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
        update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", reply_markup=reply_markup)
        user_questions[user_chat_id] = {
            'status': 0,
            'username': find_user_by_telegram(user_telegram_id)['phone']
        }
        # user_questions[user_chat_id]['status'] = 2

    elif user_questions[user_chat_id]['status'] == 4:
        pass;
    else:
        reply_markup = ReplyKeyboardMarkup(keyboard=custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
        update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å", reply_markup=reply_markup)


def handle_user_message(update, context):
    user_chat_id = update.message.chat.id

    custom_keyboard = [['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=False, resize_keyboard=True)

    user_telegram_id = update.message.from_user.id

    if not check_by_telegram_id(user_telegram_id):
        user_in_system = check_and_insert(update.message.text, user_telegram_id)
        if user_in_system is None:
            update.message.reply_text(
                '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—É—Ä—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º')
            return
        elif not user_in_system:
            update.message.reply_text(
                '–ù–æ–º–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
            return
        elif user_in_system:
            update.message.reply_text(
                '–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"',
                reply_markup=reply_markup)
        return

    if not user_chat_id in user_questions:
        custom_keyboard = [['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']]
        reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
        update.message.reply_text('–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"', reply_markup=reply_markup)
    elif user_questions[user_chat_id]['status'] == 0:
        if not update.message.text:
            custom_keyboard = [['–í–æ–ø—Ä–æ—Å —Ä–µ—à–µ–Ω']]
            reply_markup = ReplyKeyboardMarkup(keyboard=custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
            update.message.reply_text("–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º!", reply_markup=reply_markup)
        else:

            new_message = context.bot.send_message(
                chat_id=main_channel,
                text=(user_questions[user_chat_id]['username'] + '\n' + update.message.text)
            )

            user_questions[user_chat_id]['status'] = 1
            user_questions[user_chat_id]['curator_id'] = get_curator()
            user_questions[user_chat_id]['main_channel_message_id'] = new_message.message_id

            new_message_to_curator = context.bot.send_message(
                chat_id=user_questions[user_chat_id]['curator_id'],
                text=(user_questions[user_chat_id]['username'] + '\n' + update.message.text)
            )
            user_questions[user_chat_id]['curator_channel_message_id'] = new_message_to_curator.message_id
    elif user_questions[user_chat_id]['status'] == 1:
        update.message.reply_text("–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –∫—É—Ä–∞—Ç–æ—Ä.")
    elif user_questions[user_chat_id]['status'] == 2:

        to_main_chat = context.bot.copy_message(
            chat_id=main_chat,
            reply_to_message_id=user_questions[user_chat_id]['main_chat_message_id'],
            message_id=update.message.message_id,
            from_chat_id=update.message.chat_id
        )
        to_curator_chat = context.bot.copy_message(
            chat_id=curators[user_questions[user_chat_id]['curator_id']],
            reply_to_message_id=user_questions[user_chat_id]['curator_chat_message_id'],
            message_id=update.message.message_id,
            from_chat_id=update.message.chat_id
        )
    elif user_questions[user_chat_id]['status'] == 4:
        custom_keyboard = [['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']]
        reply_markup = ReplyKeyboardMarkup(keyboard=custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!", reply_markup=reply_markup)
        last = user_questions.pop(user_chat_id, None)

        to_main_chat = context.bot.copy_message(
            chat_id=main_chat,
            reply_to_message_id=last['main_chat_message_id'],
            message_id=update.message.message_id,
            from_chat_id=update.message.chat_id
        )


def close_problem(update, context):
    user_chat_id = update.message.chat.id
    if not user_chat_id in user_questions or user_questions[user_chat_id]['status'] == 0:
        custom_keyboard = [['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']]
        reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
        update.message.reply_text('–í—ã –Ω–µ –∑–∞–¥–∞–ª–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å', reply_markup=reply_markup)

    elif user_questions[user_chat_id]['status'] == 2:

        reply_markup = on_end_estimate_keyboard()
        update.message.reply_text("–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É", reply_markup=reply_markup)

        context.bot.send_message(
            chat_id=main_chat,
            text='–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            reply_to_message_id=user_questions[user_chat_id]['main_chat_message_id']
        )

        context.bot.send_message(
            chat_id=curators[user_questions[user_chat_id]['curator_id']],
            text='–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º',
            reply_to_message_id=user_questions[user_chat_id]['curator_chat_message_id']
        )
        user_questions[user_chat_id]['status'] = 3
    elif user_questions[user_chat_id]['status'] == 3:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É", reply_markup=on_end_estimate_keyboard())


def handle_message(update, context):
    pass;


def on_end_estimate_keyboard():
    keyboard = [[InlineKeyboardButton('1', callback_data='es1'), InlineKeyboardButton('2', callback_data='es2')],
                [InlineKeyboardButton('3', callback_data='es3'), InlineKeyboardButton('4', callback_data='es4')],
                [InlineKeyboardButton('5', callback_data='es5')]]
    return InlineKeyboardMarkup(keyboard)


def get_curator():
    actual_curator = curators_queue.pop(0)
    curators_queue.append(actual_curator)
    return actual_curator


# def get_actual_curator():

def update_pinned(update, context):
    cht = context.bot.getChat(update.message.chat.id)
    pndmsg = cht.pinned_message
    check_message_id = pndmsg.forward_from_message_id
    if update.message.forward_from_chat.id in curators.keys():
        for user_chat_id, user_question in user_questions.items():
            if user_question['curator_channel_message_id'] == check_message_id:
                user_questions[user_chat_id]['curator_chat_message_id'] = pndmsg.message_id
                user_questions[user_chat_id]['status'] = 2
                break
    else:
        for user_chat_id, user_question in user_questions.items():
            if user_question['main_channel_message_id'] == check_message_id:
                user_questions[user_chat_id]['main_chat_message_id'] = pndmsg.message_id
                user_questions[user_chat_id]['status'] = 2
                break


def handle_curator_message(update, context):
    reply_message_id = update.message.reply_to_message.message_id
    for user_chat_id, user_question in user_questions.items():
        if (user_question['curator_chat_message_id'] == reply_message_id or user_question[
            'main_chat_message_id'] == reply_message_id) and user_question['status'] <= 2:
            to_user = context.bot.copy_message(
                chat_id=user_chat_id,
                # reply_to_message_id=user_questions[user_chat_id]['main_chat_message_id'],
                message_id=update.message.message_id,
                from_chat_id=update.message.chat_id
            )

            if user_question['main_chat_message_id'] != reply_message_id:
                caption = '–û—Ç–≤–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞'
                if update.message.caption:
                    caption = '–û—Ç–≤–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞\n' + update.message.caption

                to_main_chat = context.bot.copy_message(
                    chat_id=main_chat,
                    reply_to_message_id=user_questions[user_chat_id]['main_chat_message_id'],
                    message_id=update.message.message_id,
                    from_chat_id=update.message.chat_id,
                    caption=caption
                )
                if update.message.text:
                    text = '–û—Ç–≤–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞: \n' + update.message.text
                    context.bot.editMessageText(
                        chat_id=main_chat,
                        message_id=to_main_chat.message_id,
                        text=text
                    )
            else:
                caption = '–û—Ç–≤–µ—Ç –º–µ—Ç–æ–¥–∏—Å—Ç–∞'
                if update.message.caption:
                    caption = '–û—Ç–≤–µ—Ç –º–µ—Ç–æ–¥–∏—Å—Ç–∞\n' + update.message.caption

                to_main_chat = context.bot.copy_message(
                    chat_id=curators[user_questions[user_chat_id]['curator_id']],
                    reply_to_message_id=user_questions[user_chat_id]['curator_chat_message_id'],
                    message_id=update.message.message_id,
                    from_chat_id=update.message.chat_id,
                    caption=caption
                )
                if update.message.text:
                    text = '–û—Ç–≤–µ—Ç –º–µ—Ç–æ–¥–∏—Å—Ç–∞: \n' + update.message.text
                    context.bot.editMessageText(
                        chat_id=curators[user_questions[user_chat_id]['curator_id']],
                        message_id=to_main_chat.message_id,
                        text=text
                    )


def first_submenu(update, context):
    custom_keyboard = [['–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å']]
    reply_markup = ReplyKeyboardMarkup(custom_keyboard, one_time_keyboard=False, resize_keyboard=True)
    # bot.callback_query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É", reply_markup=reply_markup)

    estimate_string = context.match.string
    estimate = int(re.sub("[^0-9]", "", estimate_string))

    user_chat_id = update.callback_query.message.chat_id

    if user_chat_id in user_questions.keys() and user_questions[user_chat_id]['status'] is not None and \
            user_questions[user_chat_id]['status'] == 3:

        update.callback_query.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É", reply_markup=reply_markup)
        user_questions[user_chat_id]['status'] = 4

        context.bot.send_message(
            chat_id=main_chat,
            text='–û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ' + str(estimate) + " –∏–∑ 5",
            reply_to_message_id=user_questions[user_chat_id]['main_chat_message_id']
        )

        if estimate <= 3:
            update.callback_query.message.reply_text(
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —Ä–∞–±–æ—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–∞:", reply_markup=reply_markup)
        else:
            user_questions.pop(user_chat_id, None)

    elif user_questions[user_chat_id]['status'] == 4:
        update.callback_query.message.reply_text(
            "–û—Ü–µ–Ω–∫–∞ —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞,\n –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —Ä–∞–±–æ—Ç–µ –∫—É—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=reply_markup)
